{"version":3,"sources":["Firebase.js","screens/Home.js","screens/Profile.js","screens/SignInOrUp.js","screens/SignUp.js","Auth.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","Home","handleLogout","auth","signOut","className","to","Button","onClick","this","React","Component","Profile","SignInOrUp","state","loading","_isMounted","handleOnSubmit","values","setState","signInWithEmailAndPassword","email","password","then","res","props","history","push","catch","error","alert","componentDidMount","componentWillUnmount","style","width","background","padding","marginTop","textAlign","initialValues","onSubmit","validationSchema","Yup","shape","required","handleSubmit","handleChange","handleBlur","errors","touched","Form","FormGroup","Label","for","Input","type","name","id","value","onChange","onBlur","invalid","FormFeedback","color","disabled","Spinner","size","marginRight","hidden","withRouter","SignUp","createUserWithEmailAndPassword","tel","Auth","signinCheck","signedIn","onAuthStateChanged","user","children","active","spinner","text","height","App","exact","path","component","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3e43a88a.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const db = firebase.firestore();\r\nexport default firebase;","import React from 'react';\r\nimport firebase from '../Firebase';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'reactstrap';\r\n\r\nclass Home extends React.Component {\r\n\r\n    handleLogout = () => {\r\n        firebase.auth().signOut();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <p>Home</p>\r\n                <Link to=\"/profile\">Profileへ</Link>\r\n                <br />\r\n                <br />\r\n                <Button onClick={this.handleLogout}>ログアウト</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Profile extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <p>Profile</p>\r\n                <br/>\r\n                <Link to=\"/\">Homeへ</Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, FormFeedback, Spinner } from 'reactstrap';\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport firebase from '../Firebase';\r\n\r\nclass SignInOrUp extends React.Component {\r\n\r\n    state = {\r\n        loading: false, //spinner制御用\r\n    }\r\n\r\n    _isMounted = false;\r\n\r\n    handleOnSubmit = (values) => {\r\n        //spinner表示開始\r\n        if (this._isMounted) this.setState({ loading: true })\r\n        //サインイン（ログイン）処理\r\n        firebase.auth().signInWithEmailAndPassword(values.email, values.password)\r\n            .then(res => {\r\n                //正常終了時\r\n                this.props.history.push(\"/\");\r\n                if (this._isMounted) this.setState({ loading: false });\r\n            })\r\n            .catch(error => {\r\n                //異常終了時\r\n                if (this._isMounted) this.setState({ loading: false });\r\n                alert(error);\r\n            });\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this._isMounted = true;\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"mx-auto\" style={{ width: 400, background: '#eee', padding: 20, marginTop: 60 }}>\r\n                    <p style={{ textAlign: 'center' }}>サインイン</p>\r\n                    <Formik\r\n                        initialValues={{ email: '', password: '' }}\r\n                        onSubmit={(values) => this.handleOnSubmit(values)}\r\n                        validationSchema={Yup.object().shape({\r\n                            email: Yup.string().email().required(),\r\n                            password: Yup.string().required(),\r\n                        })}\r\n                    >\r\n                        {\r\n                            ({ handleSubmit, handleChange, handleBlur, values, errors, touched }) => (\r\n                                <Form onSubmit={handleSubmit}>\r\n                                    <FormGroup>\r\n                                        <Label for=\"email\">Email</Label>\r\n                                        <Input\r\n                                            type=\"email\"\r\n                                            name=\"email\"\r\n                                            id=\"email\"\r\n                                            value={values.email}\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            invalid={touched.email && errors.email ? true : false}\r\n                                        />\r\n                                        <FormFeedback>\r\n                                            {errors.email}\r\n                                        </FormFeedback>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label for=\"password\">Password</Label>\r\n                                        <Input\r\n                                            type=\"password\"\r\n                                            name=\"password\"\r\n                                            id=\"password\"\r\n                                            value={values.password}\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            invalid={touched.password && errors.password ? true : false}\r\n                                        />\r\n                                        <FormFeedback>\r\n                                            {errors.password}\r\n                                        </FormFeedback>\r\n                                    </FormGroup>\r\n                                    <div style={{ textAlign: 'center' }}>\r\n                                        <Button color=\"primary\" type=\"submit\" disabled={this.state.loading}>\r\n                                            <Spinner size=\"sm\" color=\"light\" style={{ marginRight: 5 }} hidden={!this.state.loading} />\r\n                                            ログイン\r\n                                        </Button>\r\n                                    </div>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n                </div>\r\n                <div className=\"mx-auto\" style={{ width: 400, background: '#fff', padding: 20 }}>\r\n                    <Link to=\"/signup\">新規登録はこちら。</Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignInOrUp);","import React from 'react';\r\n// import { Form } from 'react-bootstrap';\r\nimport { Button, Form, FormGroup, Label, Input, FormFeedback, Spinner } from 'reactstrap';\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport firebase from '../Firebase';\r\n\r\nclass SignUp extends React.Component {\r\n\r\n    state = {\r\n        loading: false, //処理中にボタンにspinner表示する制御用\r\n    }\r\n\r\n    _isMounted = false;\r\n\r\n    //Submitされたら\r\n    handleOnSubmit = (values) => {\r\n        //spinner表示開始\r\n        if (this._isMounted) this.setState({ loading: true });\r\n        //新規登録処理\r\n        firebase.auth().createUserWithEmailAndPassword(values.email, values.password)\r\n            .then(res => {\r\n                //正常終了時\r\n                //spinner表示終了\r\n                if (this._isMounted) this.setState({ loading: false });\r\n                //Homeに移動\r\n                this.props.history.push(\"/\"); //history.pushを使うためwithRouterしている\r\n            })\r\n            .catch(error => {\r\n                //異常終了時\r\n                if (this._isMounted) this.setState({ loading: false });\r\n                alert(error);\r\n            });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this._isMounted = true;\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"mx-auto\" style={{ width: 400, background: '#eee', padding: 20, marginTop: 60 }}>\r\n                    <p style={{ textAlign: 'center' }}>新規登録</p>\r\n                    <Formik\r\n                        initialValues={{ email: '', password: '', tel: '' }}\r\n                        onSubmit={(values) => this.handleOnSubmit(values)}\r\n                        validationSchema={Yup.object().shape({\r\n                            email: Yup.string().email().required(),\r\n                            password: Yup.string().required(),\r\n                            tel: Yup.string().required(),\r\n                        })}\r\n                    >\r\n                        {\r\n                            ({ handleSubmit, handleChange, handleBlur, values, errors, touched }) => (\r\n                                <Form onSubmit={handleSubmit}>\r\n                                    <FormGroup>\r\n                                        <Label for=\"name\">Email</Label>\r\n                                        <Input\r\n                                            type=\"email\"\r\n                                            name=\"email\"\r\n                                            id=\"email\"\r\n                                            value={values.email}\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            invalid={touched.email && errors.email ? true : false}\r\n                                        />\r\n                                        <FormFeedback>\r\n                                            {errors.email}\r\n                                        </FormFeedback>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label for=\"password\">Password</Label>\r\n                                        <Input\r\n                                            type=\"password\"\r\n                                            name=\"password\"\r\n                                            id=\"password\"\r\n                                            value={values.password}\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            invalid={touched.password && errors.password ? true : false}\r\n                                        />\r\n                                        <FormFeedback>\r\n                                            {errors.password}\r\n                                        </FormFeedback>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Label for=\"tel\">Tel</Label>\r\n                                        <Input\r\n                                            type=\"tel\"\r\n                                            name=\"tel\"\r\n                                            id=\"tel\"\r\n                                            value={values.tel}\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            invalid={touched.tel && errors.tel ? true : false}\r\n                                        />\r\n                                        <FormFeedback>\r\n                                            {errors.tel}\r\n                                        </FormFeedback>\r\n                                    </FormGroup>\r\n                                    <div style={{ textAlign: 'center' }}>\r\n                                        <Button color=\"success\" type=\"submit\" disabled={this.state.loading}>\r\n                                            <Spinner size=\"sm\" color=\"light\" style={{ marginRight: 5 }} hidden={!this.state.loading} />\r\n                                            新規登録\r\n                                        </Button>\r\n                                    </div>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n                </div>\r\n                <div className=\"mx-auto\" style={{ width: 400, background: '#fff', padding: 20 }}>\r\n                    <Link to=\"/signin\">ログインはこちら。</Link>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignUp);","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport firebase from './Firebase';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nclass Auth extends React.Component {\r\n\r\n    state = {\r\n        signinCheck: false, //ログインチェックが完了してるか\r\n        signedIn: false, //ログインしてるか\r\n    }\r\n\r\n    _isMounted = false; //unmountを判断（エラー防止用）\r\n\r\n    componentDidMount = () => {\r\n        //mountされてる\r\n        this._isMounted = true;\r\n\r\n        //ログインしてるかどうかチェック\r\n        firebase.auth().onAuthStateChanged(user => {\r\n            if (user) {\r\n                //してる\r\n                if (this._isMounted) {\r\n                    this.setState({\r\n                        signinCheck: true,\r\n                        signedIn: true,\r\n                    });\r\n                }\r\n            } else {\r\n                //してない\r\n                if (this._isMounted) {\r\n                    this.setState({\r\n                        signinCheck: true,\r\n                        signedIn: false,\r\n                    });\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    render() {\r\n        //チェックが終わってないなら（ローディング表示）\r\n        if (!this.state.signinCheck) {\r\n            return (\r\n                <LoadingOverlay\r\n                    active={true}\r\n                    spinner\r\n                    text='Loading...'\r\n                >\r\n                    <div style={{ height: '100vh', width: '100vw' }}></div>\r\n                </ LoadingOverlay>\r\n            );\r\n        }\r\n\r\n        //チェックが終わりかつ\r\n        if (this.state.signedIn) {\r\n            //サインインしてるとき（そのまま表示）\r\n            return this.props.children;\r\n        } else {\r\n            //してないとき（ログイン画面にリダイレクト）\r\n            return <Redirect to=\"/signin\" />\r\n        }\r\n    }\r\n}\r\n\r\nexport default Auth;","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport firebase from './Firebase';\r\n\r\n//screens\r\nimport Home from './screens/Home';\r\nimport Profile from './screens/Profile';\r\nimport SignInOrUp from './screens/SignInOrUp';\r\nimport SignUp from './screens/SignUp';\r\n\r\nimport Auth from './Auth';\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/signin\" component={SignInOrUp} />\r\n                    <Route exact path=\"/signup\" component={SignUp} />\r\n                    {/* 以下認証のみ */}\r\n                    <Auth>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={Home} />\r\n                            <Route exact path=\"/profile\" component={Profile} />\r\n                            <Route render={() => <p>not found.</p>} />\r\n                        </Switch>\r\n                    </Auth>\r\n                </Switch>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}